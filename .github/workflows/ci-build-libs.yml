name: Manual build static libraries

on:
  workflow_dispatch:
  push:
    branches:
      - feature/update-external-libraries-test
      - main


jobs:
  build-libxml2:
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04-arm, macos-latest, macos-13 ]

      fail-fast: false

    runs-on: ${{ matrix.os }}
    env:
      JOB_VAR: "job_value"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up dependencies Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget cmake autoconf automake

      - name: Set up dependencies Macos
        if: runner.os == 'macOS'
        run: |
          brew install wget cmake autoconf automake

      - name: Set OS and ARCH variables
        run: |
          echo "OS=${{ runner.os == 'Linux' && 'linux' || 'mac' }}" >> $GITHUB_ENV
          echo "ARCH=${{ runner.arch == 'X64' && '64' || 'arm64' }}" >> $GITHUB_ENV
        shell: bash

      - name: Download source
        run: |
          pushd libs/libxml
          wget -O source.tar.gz https://gitlab.gnome.org/GNOME/libxml2/-/archive/v2.13.6/libxml2-v2.13.6.tar.gz
          tar -xzf source.tar.gz
          mv libxml2-* src

      - name: Build source
        run: |
          pushd libs/libxml/src
          mkdir -p build 
          pushd build 
          cmake -G "Unix Makefiles" .. -D LIBXML2_WITH_LZMA=OFF -D LIBXML2_WITH_ICONV=OFF -D LIBXML2_WITH_ZLIB=OFF -DBUILD_SHARED_LIBS=OFF
          make
          popd
          mkdir -p output/libxml/$OS/$ARCH
          cp build/libxml2.a output/libxml/$OS/$ARCH          

      - name: Save specific file
        uses: actions/upload-artifact@v4
        with:
          name: libxml2-binary-${{ env.OS }}-${{ env.ARCH }}
          path: libs/libxml/src/output


  build-freetype:
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04-arm, macos-latest, macos-13 ]

      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up dependencies Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget cmake autoconf automake

      - name: Set up dependencies Macos
        if: runner.os == 'macOS'
        run: |
          brew install wget cmake autoconf automake

      - name: Set OS and ARCH variables
        run: |
          echo "OS=${{ runner.os == 'Linux' && 'linux' || 'mac' }}" >> $GITHUB_ENV
          echo "ARCH=${{ runner.arch == 'X64' && '64' || 'arm64' }}" >> $GITHUB_ENV
        shell: bash

      - name: Download source
        run: |
          cd libs/freetype
          wget -O source.tar.gz https://sourceforge.net/projects/freetype/files/freetype2/2.13.3/freetype-2.13.3.tar.gz/download
          tar -zxf source.tar.gz
          mv freetype-* src

      - name: Build source
        run: |
          cd libs/freetype/src
          mkdir build
          cd build
          cmake -G "Unix Makefiles" .. -D FT_DISABLE_BROTLI=TRUE -D FT_DISABLE_HARFBUZZ=TRUE -D FT_DISABLE_ZLIB=TRUE -D FT_DISABLE_BZIP2=TRUE -D FT_DISABLE_PNG=TRUE
          make
          cd ..
          mkdir -p output/freetype/$OS/$ARCH
          cp build/libfreetype.a output/freetype/$OS/$ARCH/
          cp -r include output/freetype

      - name: Save specific file
        uses: actions/upload-artifact@v4
        with:
          name: freetype-binary-${{ env.OS }}-${{ env.ARCH }}
          path: libs/freetype/src/output

  build-libpng:
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04-arm, macos-latest, macos-13 ]

      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up dependencies Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget cmake autoconf automake

      - name: Set up dependencies Macos
        if: runner.os == 'macOS'
        run: |
          brew install wget cmake autoconf automake

      - name: Set OS and ARCH variables
        run: |
          echo "OS=${{ runner.os == 'Linux' && 'linux' || 'mac' }}" >> $GITHUB_ENV
          echo "ARCH=${{ runner.arch == 'X64' && '64' || 'arm64' }}" >> $GITHUB_ENV
        shell: bash

      - name: Download source
        run: |
          cd libs/image/png
          wget -O source.tar.gz https://sourceforge.net/projects/libpng/files/libpng16/1.6.46/libpng-1.6.46.tar.gz/download
          tar -zxf source.tar.gz
          mv libpng* src

      - name: Build source
        run: |
          cd libs/image/png/src
          mkdir build
          cd build
          cmake .. -DBUILD_SHARED_LIBS=OFF
          make
          cd ..
          mkdir -p output/image/png/$OS/$ARCH
          cp build/libpng.a output/image/png/$OS/$ARCH

      - name: Save specific file
        uses: actions/upload-artifact@v4
        with:
          name: libpng-binary-${{ env.OS }}-${{ env.ARCH }}
          path: libs/image/png/src/output

  build-zlib:
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04-arm, macos-latest, macos-13 ]

      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up dependencies Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget cmake autoconf automake

      - name: Set up dependencies Macos
        if: runner.os == 'macOS'
        run: |
          brew install wget cmake autoconf automake

      - name: Set OS and ARCH variables
        run: |
          echo "OS=${{ runner.os == 'Linux' && 'linux' || 'mac' }}" >> $GITHUB_ENV
          echo "ARCH=${{ runner.arch == 'X64' && '64' || 'arm64' }}" >> $GITHUB_ENV
        shell: bash

      - name: Download source
        run: |
          cd libs/image/zlib
          wget -O source.tar.gz https://zlib.net/zlib-1.3.1.tar.gz
          tar -zxf source.tar.gz
          mv zlib-* src

      - name: Build source
        run: |
          cd libs/image/zlib/src
          mkdir build
          cd build
          cmake .. -DBUILD_SHARED_LIBS=OFF
          make
          cd ..
          mkdir -p output/image/zlib/$OS/$ARCH
          cp build/libz.a output/image/zlib/$OS/$ARCH

      - name: Save specific file
        uses: actions/upload-artifact@v4
        with:
          name: libzlib-binary-${{ env.OS }}-${{ env.ARCH }}
          path: libs/image/zlib/src/output

  build-icu:
    strategy:
      matrix:
        os: [ ubuntu-22.04, ubuntu-24.04-arm, macos-latest, macos-13 ]

      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up dependencies Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget cmake autoconf automake

      - name: Set up dependencies Macos
        if: runner.os == 'macOS'
        run: |
          brew install wget cmake autoconf automake

      - name: Set OS and ARCH variables
        run: |
          echo "OS=${{ runner.os == 'Linux' && 'linux' || 'mac' }}" >> $GITHUB_ENV
          echo "ARCH=${{ runner.arch == 'X64' && '64' || 'arm64' }}" >> $GITHUB_ENV
        shell: bash

      - name: Download source
        run: |
          cd libs/icu
          wget -O source.tar.gz https://github.com/unicode-org/icu/archive/refs/tags/release-76-1.tar.gz
          tar -zxf source.tar.gz
          mv icu-release-* src

      - name: Build source
        run: |
          cd libs/icu/src/icu4c/source
          ./runConfigureICU Linux --enable-static --disable-shared
          make -j8
          cd ../../
          mkdir -p output/icu/$OS/$ARCH
          cp icu4c/source/lib/libicudata.a output/icu/$OS/$ARCH
          cp icu4c/source/lib/libicuuc.a output/icu/$OS/$ARCH

      - name: Save specific file
        uses: actions/upload-artifact@v4
        with:
          name: icu-binary-${{ env.OS }}-${{ env.ARCH }}
          path: libs/icu/src/output


  assemble-artifact:
      needs: [build-libxml2, build-freetype, build-libpng, build-zlib, build-icu]
      runs-on: ubuntu-24.04

      steps:
        - name: Checkout repository
          uses: actions/checkout@v3

        - name: Download artifacts
          uses: actions/download-artifact@v4
          with:
            path: output
        - name: Move contents to output directory
          run: |
            for dir in output/*; do
              if [ -d "$dir" ]; then
                rsync -a "$dir"/* output/
                rm -rf "$dir"
              fi
            done
          shell: bash
        - name: Display structure of downloaded files
          run: ls -R
        - name: Save artifacts
          uses: actions/upload-artifact@v4
          with:
            name: all-binaries
            path: output
